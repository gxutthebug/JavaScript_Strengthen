/*JS引擎是单线程的，直白来说就是一个时间点下JS引擎只能去做一件事情，而Java这种多线程语言，可以同时做几件事情。
JS做的任务分为同步和异步两种，所谓 "异步"，简单说就是一个任务不是连续完成的，先执行第一段，等做好了准备，再回
过头执行第二段，第二段也被叫做回调；同步则是连贯完成的。像读取文件、网络请求这种任务属于异步任务：
花费时间很长，但中间的操作不需要JS引擎自己完成，它只用等别人准备好了，把数据给他，他再继续执行回调部分。
 */

// 微任务
console.log("111")

setTimeout(() =>{
    console.log("222")
},0)

Promise.resolve("333").
then( value => {
  console.log(value) 
})

Promise.resolve("444").
then( value => {
  console.log(value) 
})

Promise.resolve("555").
then( value => {
  console.log(value) 
})

console.log('666')
/*111 这里我们可以看出两个东西：① 3-5的打印在6的后面,说明即使promise内部包着的不是异步任务也会被当成异步任务执行
                              ② 3-5 在打印在2的前面,说明同样是异步任务promise的优先级比setTimeout高
 666
 333
 444
 555
 222 */

//console.log('---------------------------------------------------------------------------------------------------------------------')

Promise.resolve().then(()=>{
    console.log('第一个回调函数：微任务1')  // 1
    setTimeout(()=>{
      console.log('第三个回调函数：宏任务2')  // 4
    },0)
  })
  setTimeout(()=>{
    console.log('第二个回调函数：宏任务1')  // 2
    Promise.resolve().then(()=>{
      console.log('第四个回调函数：微任务2')   // 3
    })
  },0)
  
/*
第一个回调函数：微任务1
 第二个回调函数：宏任务1
 第四个回调函数：微任务2
 第三个回调函数：宏任务2
*/ 